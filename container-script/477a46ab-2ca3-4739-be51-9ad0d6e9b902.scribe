resource "container-script" "477a46ab-2ca3-4739-be51-9ad0d6e9b902" {
  code = "477a46ab-2ca3-4739-be51-9ad0d6e9b902"
  name = "AP k8sprep Script Template"
  uuid = "088451a3-8a2b-465e-b9b1-ebf04ba9b33f"
  dateCreated = "2023-10-10T05:23:08.000Z"
  lastUpdated = "2023-10-10T05:23:08.000Z"
  runAsUser = "root"
  script = <<EOFSCRIBE
#!/bin/bash

function wait_for_dpkg() {
  FRONT_END_LOCK_FILE="/var/lib/dpkg/lock-frontend"
  DPKG_LOCK_FILE="/var/lib/apt/lists/lock"

  echo "checking for dpkg lock existence..."
  if [ -e "$DPKG_LOCK_FILE" ]; then
    while fuser "$DPKG_LOCK_FILE" >/dev/null 2>&1; do
      echo "Waiting for lock $DPKG_LOCK_FILE..."
      sleep 1
    done
  fi

  echo "checking for dpkg lock-frontend existence..."
  if [ -e "$FRONT_END_LOCK_FILE" ]; then
    while fuser "$FRONT_END_LOCK_FILE" >/dev/null 2>&1; do
      echo "Waiting for lock $FRONT_END_LOCK_FILE..."
      sleep 1
    done
    echo "Force removing lock $FRONT_END_LOCK_FILE"
    sudo rm "$FRONT_END_LOCK_FILE"
    sleep 5
  fi
}

# Swap must be turned off, see https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

# Install containerd packages from Debian, see: https://docs.docker.com/engine/install/ubuntu/

echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

wait_for_dpkg
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg lsb-release -y
sudo mkdir -m 0755 -p /etc/apt/keyrings

file_path="/etc/apt/keyrings/docker.gpg"

# Check if the file exists
if [ -f "$file_path" ]; then
    # If it exists, delete it
    rm "$file_path"
    echo "File deleted: $file_path"
else
    echo "File does not exist: $file_path"
fi

sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo mkdir -m 0755 -p /etc/apt/keyrings
# Check if the file exists
if [ -f "$file_path" ]; then
    # If it exists, delete it
    rm "$file_path"
    echo "File deleted: $file_path"
else
    echo "File does not exist: $file_path"
fi
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

sudo apt-get update

# The Docker documentation advises to install the whole Docker runtime environment, but containerd.io is sufficient
sudo apt-get install containerd.io -y

# Prepare the necessary network config, see: https://kubernetes.io/docs/setup/production-environment/container-runtimes/
sudo cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter
sudo cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

# Install kubeadm following the K8s documentation: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
sudo apt-get install -y apt-transport-https ca-certificates curl
sudo curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg
sudo echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet=1.26.1-00 kubeadm=1.26.1-00 kubectl=1.26.1-00

sudo apt-mark hold kubelet kubeadm kubectl

# See https://github.com/etcd-io/etcd/issues/13670
cat <<EOF | sudo tee /etc/containerd/config.toml
version = 2
[plugins]
[plugins."io.containerd.grpc.v1.cri"]
  [plugins."io.containerd.grpc.v1.cri".containerd]
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
        runtime_type = "io.containerd.runc.v2"
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
          SystemdCgroup = true
EOF

sudo systemctl restart containerd
EOFSCRIBE
  scriptPhase = "preProvision"
  sudoUser = true
}
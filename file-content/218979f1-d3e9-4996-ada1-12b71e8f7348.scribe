resource "file-content" "218979f1-d3e9-4996-ada1-12b71e8f7348" {
  uuid = "218979f1-d3e9-4996-ada1-12b71e8f7348"
  content = <<EOFSCRIBE
import json

# file = open('./PricePhase/pricePhaseExample.json')
# morpheusSpec = json.load(file)
#morpheusSpec = morpheus

morpheusSpec = morpheus['spec']['config']

# UCSF Pricing

ucsf_vmBaseCost             = float(20)
ucsf_incrementCost_cpu      = float(5)
ucsf_incrementCost_ram      = float(5)
ucsf_incrementCost_diskGb   = float(0.10)
ucsf_qtyIncluded_cpu        = int(1)
ucsf_qtyIncluded_ram        = int(1)
ucsf_qtyIncluded_diskGb     = int(100)
ucsf_support_Waived         = float(0)
ucsf_support_BusinessHours  = float(94)
ucsf_support_AroundTheClock = float(300)
ucsf_StandardSplit_campus   = int(40)

debug = False
# Debug will give more text, but will break the pricing phase which expects only specific output

def get_ucsf_vm_price(qtyCpu, qtyRam, qtyDisk):
    if debug: print "Determining UCSF VM pre-split price"
    if qtyCpu < 1:
        raise Exception("Invalid CPU Quantity; enter a positive whole number")
    if qtyRam < 1:
        raise Exception("Invalid RAM Quantity; enter a positive whole number")
    if qtyRam < 1:
        raise Exception("Invalid Disk GB Quantity; enter a positive whole number")
    if qtyDisk < ucsf_qtyIncluded_diskGb:
        qtyDisk = ucsf_qtyIncluded_diskGb
    if debug: print "Provided CPU: %s, Provided RAM: %s, Provided Disk (GB): %s" % (str(qtyCpu), str(qtyRam), str(qtyDisk))

    billableBase = ucsf_vmBaseCost
    billableCpu  = qtyCpu  - ucsf_qtyIncluded_cpu
    billableRam  = qtyRam  - ucsf_qtyIncluded_ram
    billableDisk = qtyDisk - ucsf_qtyIncluded_diskGb
    if debug: print "Billable CPU: %s, Billable RAM: %s, Billable Disk (GB): %s" % (str(billableCpu), str(billableRam), str(billableDisk))

    cost_cpu  = float(billableCpu  * ucsf_incrementCost_cpu)
    if debug: print "CPU cost: %s" % (str(cost_cpu))
    cost_ram  = float(billableRam  * ucsf_incrementCost_ram)
    if debug: print "RAM cost: %s" % (str(cost_ram))
    cost_disk = float(billableDisk * ucsf_incrementCost_diskGb)
    if debug: print "Disk cost: %s" % (str(cost_disk))

    ucsf_vm_price = cost_cpu + cost_ram + cost_disk
    if debug: print "Calculated pre-split vm cost: %s" % (str(ucsf_vm_price))

    return ucsf_vm_price

def get_ucsf_os_support_price(supportElection):
    validSupportOptions = ["waived", "businesshours", "aroundtheclock"]
    supportElection = supportElection.lower()
    if supportElection not in validSupportOptions:
        raise Exception("Invalid OS Support Election. Use 'Waived', 'BusinessHours', or 'AroundTheClock'")

    if supportElection == "waived":
        ucsf_os_support_cost = ucsf_support_Waived
    elif supportElection == "businesshours":
        ucsf_os_support_cost = ucsf_support_BusinessHours
    elif supportElection == "aroundtheclock":
        ucsf_os_support_cost = ucsf_support_AroundTheClock
    else:
        raise Exception("Error determining support election")

    if debug: print "calculated supportCost: %s" % (str(ucsf_os_support_cost))
    return ucsf_os_support_cost

def ucsf_get_postSplit_price(currentCost, chargedPercent):
    if chargedPercent < 1 or chargedPercent > 100:
        raise Exception("Invalid split percentage; please use an integer between 1 and 100.")
    price_postSplit = currentCost * float(chargedPercent / 100)
    if debug: print "post-split price: %s" % (str(price_postSplit))
    return price_postSplit

def outputPricingData(alwaysCost_preSplit, alwaysPrice_postSplit):
    pricingObject = { "priceData": [
        {
            "incurCharges": "always",
            "currency": "USD",
            "unit": "month",
            "cost":  round(alwaysCost_preSplit, 2),
            "price": round(alwaysPrice_postSplit, 2)
        },
        {
            "incurCharges": "running",
            "currency": "USD",
            "unit": "month",
            "cost":  round(alwaysCost_preSplit, 2),
            "price": round(alwaysPrice_postSplit, 2)
        },
        {
            "incurCharges": "stopped",
            "currency": "USD",
            "unit": "month",
            "cost":  0,
            "price": 0
        }
    ]
    }
    return pricingObject

###################### MAIN #####################3
standardSplit=False
if standardSplit:
    appliedSplit = ucsf_StandardSplit_campus
else:
    appliedSplit = 100

specProvided_support   = morpheusSpec['customOptions']['vm_supportElection']
specProvided_cpu       = morpheusSpec['customOptions']['servicePlan']['maxCores']
specProvided_ram       = morpheusSpec['customOptions']['servicePlan']['maxMemory'] / 1024 / 1024 / 1024
specProvided_disks     = morpheusSpec['customOptions']['vm_disk']
specProvided_diskTotal = 0
for disk in specProvided_disks:
    specProvided_diskTotal += disk['size']

vmCost               = get_ucsf_vm_price(specProvided_cpu, specProvided_ram, specProvided_diskTotal)
supportCost          = get_ucsf_os_support_price(specProvided_support)

# I was doing this to see if any of these are respected when updating the support election on the form. They are NOT. None of them.
# Maybe it's still forms misbehaving? Either way, no effect in testing.
# if morpheusSpec['customOptions']['vm_supportElection'] == "waived": supportCost = 200
# if morpheusSpec['config']['customOptions']['vm_supportElection'] == "waived": supportCost = 400
# if morpheusSpec['server']['config']['customOptions']['vm_supportElection'] == "waived": supportCost = 500
# if morpheusSpec['customOptions']['vm_supportElection'] == "waived": supportCost = 600

cost_preSplit        = round(vmCost + supportCost, 2)
price_postSplit      = round(ucsf_get_postSplit_price(cost_preSplit, appliedSplit), 2)

print json.dumps(outputPricingData(cost_preSplit, price_postSplit))

EOFSCRIBE
  dateCreated = "2023-11-02T06:41:36.000Z"
  lastUpdated = "2023-11-03T11:35:04.000Z"
}